import React, { useState, useCallback } from 'react';
import { motion } from 'framer-motion';
import axios from 'axios';
import Modal from 'react-modal';
import { updateContact } from '../Api/Api';
import Saidbar from '../Saidbar/Saidbar';

const ContactDetails = () => {
    const [modalIsOpen, setModalIsOpen] = useState(false);
    const [editData, setEditData] = useState({ role: '', name: '', contact: '', address: '' });
    const [loading, setLoading] = useState(false);

    const containerVariants = {
        hidden: { opacity: 0, y: 50 },
        visible: { opacity: 1, y: 0, transition: { type: 'spring', stiffness: 50, staggerChildren: 0.2 } },
    };

    const itemVariants = {
        hidden: { opacity: 0, y: 20 },
        visible: { opacity: 1, y: 0 },
    };

    const openModal = (role, name, contact, address) => {
        setEditData({ role, name, contact, address: address || '' });
        setModalIsOpen(true);
    };

    const closeModal = () => {
        setModalIsOpen(false);
    };

    const handleChange = useCallback((e) => {
        const { name, value } = e.target;
        setEditData((prevData) => ({ ...prevData, [name]: value }));
    }, []);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        try {
            const response = await updateContact(editData);
            alert(response.message);
            closeModal();
        } catch (error) {
            console.error("Error updating contact:", error);
            alert("Failed to update contact.");
        } finally {
            setLoading(false);
        }
    };

    const customStyles = {
        content: {
            top: '50%',
            left: '50%',
            right: 'auto',
            bottom: 'auto',
            marginRight: '-50%',
            transform: 'translate(-50%, -50%)',
            borderRadius: '10px',
            padding: '20px',
            backgroundColor: '#fff',
            width: '90%',
            maxWidth: '500px',
            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',
        },
        overlay: {
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
        },
    };

    return (
        <div>
            <div>
                <Saidbar />
            </div>

            <div className='sm:ml-[250px] px-[30px] pt-[25px]'>
                <div className='mt-[31px]'>
                    <h2 className="text-2xl font-bold mb-4 font-roboto text-[32px] border-b-[2px] pb-[15px] border-black">
                        Update Contact Details
                    </h2>
                </div>
                <motion.div
                    className=' gap-[25px] mt-[50px] flex flex-wrap '
                    initial="hidden"
                    whileInView="visible"
                    viewport={{ once: true }}
                    variants={containerVariants}
                >
                    {[ 
                        { role: "BRAND", name: "Mr Aakash", contact: "+91 7568519811" },
                        { role: "FOUNDER", contact: "info@m4mformen.com" },
                        { role: "FooterAddress", address: "Ground Laxminarayan Apartment, 2, Ghod Dod Rd, Athwa, Surat, Gujarat 395007" },
                        { role: "FooterContact", contact: "info@m4mformen.com" },
                        { role: "SALES / VACANCY", name: "Sales Team", contact: "+91 79-90068568" }
                    ].map((contact, index) => {
                        const { role, name, contact: contactDetails, address } = contact;
                        return (
                            <motion.div
                                key={index}
                                className="flex md:flex-row flex-col 2xl:w-[30%] xl:w-[45%] lg:w-[45%] md:w-[100%] w-[100%] items-center gap-[20px] p-[25px] border-black border-[1px] justify-center rounded-[25px] cursor-pointer"
                                variants={itemVariants}
                            >
                                <a href={role === "FOUNDER" ? `mailto:${contactDetails}` : `tel:${contactDetails}`} className="flex w-full items-center gap-[15px]">
                                    <div className="sm:w-[60%]">
                                        <h2 className="font-lato font-bold text-[22px]">{role}</h2>
                                        {name && <p className="font-poppins text-[#5F5F5F] text-[16px]">{name}</p>}
                                        {contactDetails && <p className="font-lato font-extrabold text-[20px] text-black">{contactDetails}</p>}
                                        {address && <p className="font-lato text-[#5F5F5F] text-[16px]">{address}</p>}
                                    </div>
                                </a>
                                <button
                                    onClick={() => openModal(role, name, contactDetails, address)}
                                    className="mt-2 bg-blue-500 text-white px-4 py-2 rounded"
                                >
                                    Edit
                                </button>
                            </motion.div>
                        );
                    })}

                    <Modal
                        isOpen={modalIsOpen}
                        onRequestClose={closeModal}
                        style={customStyles}
                        ariaHideApp={false}
                        closeTimeoutMS={200}
                    >
                        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.3 }}>
                            <h2 className="text-xl font-bold mb-4">Edit Contact</h2>
                            <form onSubmit={handleSubmit} className="flex flex-col gap-4">
                                <label className="text-sm font-semibold">
                                    Role:
                                    <input 
                                        type="text" 
                                        name="role" 
                                        value={editData.role} 
                                        onChange={handleChange} 
                                        className="border p-2 rounded mt-1 w-full" 
                                        required 
                                    />
                                </label>

                                {editData.name && (
                                    <label className="text-sm font-semibold">
                                        Name:
                                        <input 
                                            type="text" 
                                            name="name" 
                                            value={editData.name} 
                                            onChange={handleChange} 
                                            className="border p-2 rounded mt-1 w-full" 
                                            required 
                                        />
                                    </label>
                                )}

                                {/* Contact field should only show if it's not empty */}
                                {editData.contact && (
                                    <label className="text-sm font-semibold">
                                        Contact:
                                        <input 
                                            type="text" 
                                            name="contact" 
                                            value={editData.contact} 
                                            onChange={handleChange} 
                                            className="border p-2 rounded mt-1 w-full" 
                                            required 
                                        />
                                    </label>
                                )}

                                {/* Address field should only show for "Footer" role */}
                                {editData.role === "FooterAddress" && (
                                    <label className="text-sm font-semibold">
                                        Address:
                                        <input 
                                            type="text" 
                                            name="address" 
                                            value={editData.address || ""} 
                                            onChange={handleChange} 
                                            className="border p-2 rounded mt-1 w-full" 
                                            required 
                                        />
                                    </label>
                                )}

                                <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded mt-4">
                                    {loading ? 'Saving...' : 'Save Changes'}
                                </button>
                            </form>
                        </motion.div>
                    </Modal>

                </motion.div>
            </div>
        </div>
    );
};

export default ContactDetails;
